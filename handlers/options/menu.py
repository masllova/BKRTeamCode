from telegram import Update
from telegram.ext import ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from keyboards.menu import BUTTON_TO_COMMAND, get_menu_keyboard
from keyboards.settings import make_settings_keyboard
from db.queries_users import user_exists, get_user_role, get_user_group_ids, get_user_by_id
from db.queries_groups import get_group_by_id
from texts.menu import MENU_AVAILABLE, NOT_REGISTERED, NO_STUDENT
from texts.search import SEARCH_STUDENT, SEARCH_TEACHER
from handlers.options.search import search_state
from handlers.options.requests import requests_state
from handlers.options.projects import groups_state, groups_data_temp
from datetime import datetime, timedelta
import json

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id

    if user_exists(chat_id):
        role = get_user_role(chat_id)
        keyboard = get_menu_keyboard(role)

        await update.message.reply_text(
            MENU_AVAILABLE,
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(NOT_REGISTERED)

async def handle_menu_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    command = BUTTON_TO_COMMAND.get(text, "unknown")
    chat_id = update.message.chat_id
    
    search_state.pop(chat_id, None)
    requests_state.pop(chat_id, None)
    groups_state.pop(chat_id, None)
    groups_data_temp.pop(chat_id, None)

    if command == "search":
        search_state[chat_id] = {
            "query": None,
            "last_id": None,
            "target_role": None
        }
        role = get_user_role(chat_id)

        if role == "student":
            await update.message.reply_text(SEARCH_TEACHER)
        else:
            await update.message.reply_text(SEARCH_STUDENT)
        return
    elif command == "requests":
        requests_state[chat_id] = "awaiting_type"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏", callback_data="incoming_requests")],
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="outgoing_requests")]
        ])
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
            reply_markup=keyboard
        )
        return
    elif command == "projects":
        groups_state[chat_id] = "projects"
        group_ids = get_user_group_ids(chat_id)

        if not group_ids:
            await update.message.reply_text(
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n"
                "/search - –ù–∞–π—Ç–∏ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–∞ –Ω–∞ –æ–±—â–∏–π –ø—Ä–æ–µ–∫—Ç\n"
                "/requests - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏"
            )
            return
        
        buttons = []

        for id in group_ids:
            group = get_group_by_id(id)
            if group:
                buttons.append([
                        InlineKeyboardButton(
                        text=group["name"],
                        callback_data=f"project_{id}"
                    )]
                )

        text = "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç:"
        keyboard = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(text, reply_markup=keyboard)
        return
    elif command == "settings":
        role = get_user_role(chat_id)
        make_settings_keyboard(role)
        await update.message.reply_text("–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=keyboard)
    elif command == "journal":
        group_ids = get_user_group_ids(chat_id)

        if not group_ids:
            await update.message.reply_text(
                "–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π.\n"
                "/search - –ù–∞–π—Ç–∏ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–∞ –Ω–∞ –æ–±—â–∏–π –ø—Ä–æ–µ–∫—Ç\n"
                "/requests - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏"
            )
            return
        text = "üóÇÔ∏è –ñ—É—Ä–Ω–∞–ª –∑–∞–¥–∞—á –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤\n\nüìÅ *–ü—Ä–æ–µ–∫—Ç—ã:*"



        for id in group_ids:
            group = get_group_by_id(id)

            if group:
                tasks = group.get("tasks") or {}

                if isinstance(tasks, str):
                    tasks = json.loads(tasks)
                if tasks:
                    text += f"\n–ü—Ä–æ–µ–∫—Ç: {group["name"]}"

                    for _, task in tasks.items():
                        if task.get("done"):
                            continue
                        text += f"\n- {task.get('name', '')}"
                deadlines = group.get("deadlines") or {}
                if isinstance(deadlines, str):
                    deadlines = json.loads(deadlines)

                today = datetime.today().date()
                limit_date = today + timedelta(days=28)

                # —Å–æ–±–∏—Ä–∞–µ–º –¥–µ–¥–ª–∞–π–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 28 –¥–Ω–µ–π
                upcoming = []
                for d in deadlines.values():
                    date_str = d.get("date", "")
                    text_str = d.get("text", "")
                    try:
                        deadline_date = datetime.strptime(date_str, "%d.%m.%Y").date()
                        if today <= deadline_date <= limit_date:
                            upcoming.append((deadline_date, text_str))
                    except ValueError:
                        continue

                if upcoming:
                    text += "\n\nüìÖ  *–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:*\n"
                    text += f"\n–ü—Ä–æ–µ–∫—Ç: {group['name']}"
                    for date, deadline_text in sorted(upcoming):
                        text += f"\n{date.strftime('%d.%m.%Y')} ‚Äî {deadline_text}"
        role = get_user_role(chat_id)
        # –î–õ–Ø –¢–ï–°–¢–ê
        keyboard = get_menu_keyboard("teacher") 

        await update.message.reply_text(text, reply_markup=keyboard, parse_mode="Markdown")
        return
    elif command == "stats":
        group_ids = get_user_group_ids(chat_id)

        if not group_ids:
            await update.message.reply_text(
                "–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
                "/search - –ù–∞–π—Ç–∏ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–∞ –Ω–∞ –æ–±—â–∏–π –ø—Ä–æ–µ–∫—Ç\n"
                "/requests - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏"
            )
            return
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

        for id in group_ids:
            group = get_group_by_id(id)

            if group:
                text += f"\n\n*–ü—Ä–æ–µ–∫—Ç*: {group["name"]}"
                text += f"\n\nüìé –§–∞–π–ª—ã:"
                file_count = 0
                vkr_list = group.get("vkr", [])
                
                if vkr_list:
                    file_count +=1
                    text += "\n–§–∞–π–ª –í–ö–† –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω"
                else:
                    text += "\n–§–∞–π–ª –í–ö–† –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç"
                files_list = group.get("files", [])

                if files_list:
                    text += f"\n–ö–æ–ª–∏—á–µ—Å–≤–æ –ø—Ä–æ—á–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(files_list)}"
                articles_list = group.get("articles", [])

                if articles_list:
                    text += f"\n–ö–æ–ª–∏—á–µ—Å–≤–æ —Å—Ç–∞—Ç–µ–π: {len(articles_list)}"

                tasks = group.get("tasks") or {}

                if isinstance(tasks, str):
                    tasks = json.loads(tasks)
                if tasks:
                    text += "\n\nüìå –ó–∞–¥–∞—á–∏:"
                    text += f"\n- –í—Å–µ–≥–æ: {len(tasks)}"
                    text += f"\n- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {sum(1 for task in tasks.values() if not task.get("done", False))}"

                deadlines = group.get("deadlines") or {}
                if isinstance(deadlines, str):
                    deadlines = json.loads(deadlines)

                today = datetime.today().date()
                limit_date = today + timedelta(days=28)

                # —Å–æ–±–∏—Ä–∞–µ–º –¥–µ–¥–ª–∞–π–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 28 –¥–Ω–µ–π
                upcoming = []
                for d in deadlines.values():
                    date_str = d.get("date", "")
                    text_str = d.get("text", "")
                    try:
                        deadline_date = datetime.strptime(date_str, "%d.%m.%Y").date()
                        if today <= deadline_date <= limit_date:
                            upcoming.append((deadline_date, text_str))
                    except ValueError:
                        continue

                if upcoming:
                    text += "\n\nüìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:"
                    for date, deadline_text in sorted(upcoming):
                        text += f"\n{date.strftime('%d.%m.%Y')} ‚Äî {deadline_text}"
                

                student_id = group.get("student_id")
                student = get_user_by_id(student_id) if student_id else None
                student_name = student["full_name"] if student else NO_STUDENT

                text += f"\n\nüë§ –°—Ç—É–¥–µ–Ω—Ç: {student_name}"
                # –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        role = get_user_role(chat_id)
        keyboard = get_menu_keyboard(role) 
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode="Markdown")
        return
    else:
        await update.message.reply_text(NOT_REGISTERED)
        return